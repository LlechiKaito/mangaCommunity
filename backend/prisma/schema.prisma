// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Authority {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  users     User[]
}

model User {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  login_id      String    @unique
  email_address String    @unique
  password      String
  name          String
  authority_id  Int
  authority     Authority @relation(fields: [authority_id], references: [id])
  works         Work[]
  works_Book_mark        Book_mark[]
 }

model Work {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  title         String    
  explanation   String    
  user_id       Int 
  user          User      @relation(fields: [user_id], references: [id])
  work_image     Work_image?
  users         Book_mark[]
}

model Work_image {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  file_name     String    
  work_id       Int       @unique
  work          Work      @relation(fields: [work_id], references: [id], onDelete: Cascade)
}

model Book_mark {
  user         User       @relation(fields: [user_id], references: [id])
  user_id      Int
  work         Work       @relation(fields: [work_id], references: [id], onDelete: Cascade)
  work_id      Int
  assignedAt   DateTime @default(now())

  @@id([user_id, work_id])
}
