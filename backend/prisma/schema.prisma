// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Authority {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  users     User[]
}

model User {
  id                     Int           @id @default(autoincrement())
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  login_id               String        @unique
  email_address          String        @unique
  password               String
  name                   String
  authority_id           Int
  authority              Authority     @relation(fields: [authority_id], references: [id])
  user_image             User_image?
  password_reset_token   String?
  password_reset_expires DateTime?
  works                  Work[]
  Book_marks             Book_mark[]
 }

model User_image {
  id                Int       @id @default(autoincrement())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  file_name         String?
  another_file_name String?
  user_id           Int       @unique
  user              User      @relation(fields: [user_id], references: [id])
}

model Work {
  id            Int          @id @default(autoincrement())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  title         String    
  explanation   String    
  user_id       Int 
  user          User         @relation(fields: [user_id], references: [id])
  work_image    Work_image?
  book_marks    Book_mark[]
  work_tags     WorkTag[]    // WorkとWorkTagの1対多の関係を定義
}

model Work_image {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  file_name     String    
  work_id       Int       @unique
  work          Work      @relation(fields: [work_id], references: [id], onDelete: Cascade)
}

model Book_mark {
  id          Int       @id @default(autoincrement())
  user         User       @relation(fields: [user_id], references: [id])
  user_id      Int
  work         Work       @relation(fields: [work_id], references: [id], onDelete: Cascade)
  work_id      Int
  assignedAt   DateTime   @default(now())

  @@unique([user_id, work_id])
}

// 新しいTagテーブル
model Tag {
  id          Int       @id @default(autoincrement())
  tag_name    String
  is_deleted  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  work_tags   WorkTag[] // TagとWorkTagの1対多の関係を定義
}

// 新しい中間テーブルWorkTag
model WorkTag {
  id          Int       @id @default(autoincrement())
  work_id     Int
  tag_id      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  work        Work      @relation(fields: [work_id], references: [id], onDelete: Cascade)
  tag         Tag       @relation(fields: [tag_id], references: [id], onDelete: Cascade)

  @@unique([work_id, tag_id])
}
